"use strict";function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),Layer=window.Layer||{};Layer.Logger=function(){function e(){_classCallCheck(this,e),this.logs=[]}return _createClass(e,[{key:"save",value:function(e){this.logs.push(e)}},{key:"delete",value:function(){this.logs=[]}},{key:"print",get:function(){var e=!0,t=!1,n=void 0;try{for(var o,i=this.logs[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var r=o.value;console.log("CVL:Log - "+r)}}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}}},{key:"dump",get:function(){return this.logs}}]),e}(),Layer.logs=new Layer.Logger,Layer.Core=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"intpl",value:function(e,t){if(!e||!t)return null;for(var n=e.split(/{{|}}/),o=[],i=[],r=0;r<n.length;r++)if(r%2!=0){var a=n[r].replace(/ /g,"");o.push(a),i.push(a)}for(var s in t)if(t.hasOwnProperty(s))for(var l=0;l<o.length;l++)try{-1!==o[l].indexOf(s)&&(o[l]=t[s])}catch(e){}for(var u=0;u<o.length;u++)o[u]===i[u]&&(o[u]="");for(var c=0,p=0;p<n.length;p++)p%2!=0&&(n[p]=o[c],c++);return n.join("")}},{key:"resetProps",value:function(e,t){if(!t)return e;for(var n in e)t.hasOwnProperty(n)&&(t[n]=e[n]);return t}}]),e}(),Layer.HTTP=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"_GET",value:function(e,t){jQuery.ajax({url:e,type:"GET"}).done(function(e,n,o){Layer.logs.save("AJAX get done : "+o.statusText+" "+o.status),o.responseJSON?t.setProps(o.responseJSON):t.setHtml(e)}).fail(function(e,t,n){Layer.logs.save("AJAX get error : "+n)}).always(function(){Layer.logs.save("Executed AJAX get with url : "+e)})}},{key:"GET",value:function(e,t){jQuery.ajax({url:e,type:"GET"}).done(function(e,n,o){return Layer.logs.save("AJAX get done : "+o.statusText+" "+o.status),t(e)}).fail(function(e,t,n){return Layer.logs.save("AJAX get error : "+n),n}).always(function(){Layer.logs.save("Executed AJAX get with url : "+e)})}}]),e}(),Layer.View=function(e){function t(e){_classCallCheck(this,t);var n=_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));if(!e)throw"View component requires a data object for initialization";return e.GET&&(n._method="GET",n._endpoint=e.GET),0===$(e.sel).length?_possibleConstructorReturn(n):(n._selector=e.sel,n._elements=$(e.sel),n._html=e.html,n._templateHtml=e.html,n._props=e.props,n._onUpdate=null,n._onRemove=null,n._logs=[],n.update(),n)}return _inherits(t,Layer.Core),_createClass(t,[{key:"setCall",value:function(e){if(!e)throw"setCall requires method and endpoint";this.method=this._splitP(e)[0],this.method=this.method.toUpperCase(),this.endpoint=this._splitP(e)[1]}},{key:"update",value:function(e){"GET"===this.method&&void 0===e&&Layer.HTTP._GET(this._endpoint,this),$(this._elements).html(Layer.Core.intpl(this._templateHtml,this._props)?Layer.Core.intpl(this._templateHtml,this._props):this._html),"function"==typeof this._onUpdate&&this._onUpdate()}},{key:"remove",value:function(){$(this._elements).html(""),"function"==typeof this._onRemove&&this._onRemove()}},{key:"setSelector",value:function(e){this._selector=e,this.update()}},{key:"setElement",value:function(e){this._elements=e,this.update()}},{key:"setHtml",value:function(e){this._html=e,this._templateHtml=e,this.update(!0)}},{key:"setState",value:function(e){this._state=state,this.update()}},{key:"setMethod",value:function(e){this._method=e,this.update()}},{key:"setProps",value:function(e){this._props=Layer.Core.resetProps(e,this._props),this.update(!0)}},{key:"setEndpoint",value:function(e){this._endpoint=e,this.update()}},{key:"onUpdate",value:function(e){"function"==typeof e&&(this._onUpdate=e)}},{key:"onRemove",value:function(e){"function"==typeof e&&(this._onRemove=e)}},{key:"props",get:function(){return this._props}},{key:"method",get:function(){return this._method}},{key:"selector",get:function(){return this._selector}},{key:"element",get:function(){return this._elements}},{key:"state",get:function(){return this._state}},{key:"html",get:function(){return this._html}},{key:"endpoint",get:function(){return this._endpoint}}]),t}();var jumbo=new Layer.View({GET:"sample-data/jumbotron.html",sel:".jumbo"});jumbo.setProps({title:"Component View Layer",author:"Omar Gonzalez"});var usage=new Layer.View({props:{time:(new Date).toLocaleString(),markupInit:'\n let hi = new Layer.View({\n     props:{name:"dude"}\n     html: "&lth1&gtHello {{ name }}&lt/h1&gt",\n     sel: "#my-div"\n });',ajaxInit:'\nlet jumbo = new Layer.View({\n    GET: "sample-data/jumbotron.html",\n    sel: ".jumbo"\n});'},html:'<div class="container-fluid">\n            <div class="row">\n                <div class="col-md-6 col-md-offset-3">\n                    <h4>Features & Usage</h4>\n                    <p>CVL can handle dynamic data via interpolation, such as:</p>\n                    <p>Page loaded on: <strong>{{ time }}</strong> </p>\n                    <p>You can manage object state with the <code>View.props</code> object and related methods:</p>\n                    <p><code>component.setProps({name:"Omar Gonzalez"});</code></p>\n                    <p>A view component can be initialized with markup :</p>\n                    <p><pre>{{ markupInit }}</pre></p>\n                    <p>Alternately you can initialize it with an AJAX call:\n                    <p><pre>{{ ajaxInit }}</pre></p>\n                    <p>It also plays nice with JSON data :</p>\n                </div>\n            </div>\n        </div>',sel:".usage"}),cat=new Layer.View({GET:"sample-data/cat.json",html:'<h4>Cat Profile</h4>\n            <img src="{{ imgURL }}">\n            <ul>\n                <li>Name: {{ name }}</li>\n                <li>Age: {{ age }}</li>\n                <li>Color: {{ color }}</li>\n                <li>Bio: {{ bio }}</li>\n            </ul>',sel:".cat"}),catSource=new Layer.View({html:'\n<pre><xmp>\nlet cat = new Layer.View({\n    GET:"sample-data/cat.json",\n    html: `<h4>Cat Profile</h4>\n            <img src="{{ imgURL }}">\n            <ul>\n                <li>Name: {{ name }}</li>\n                <li>Age: {{ age }}</li>\n                <li>Color: {{ color }}</li>\n                <li>Bio: {{ bio }}</li>\n            </ul>`,\n    sel:".cat"\n});</xmp></pre>',sel:".cat-src"}),lifeCycle=new Layer.View({html:'\n        <div class="container">\n                <div class="row">\n                    <div class="col-md-6 col-md-offset-3">\n                        <h4>Component Lilfecyle</h4>\n                        <p>You can set call back functions for the update & remove event</p>\n                        <p>\n<pre>\ncat.onUpdate(function(){\n    alert(this.props.name)//<-- access lexical scope of cat component\n});\n\ncat.onRemove(function(){\n    //do something.. \n});\n</pre>\n                    <p>\n                    </div>\n                </div>\n            </div>',sel:".lifecycle"}),dep=new Layer.View({html:'<div class="container">\n                <div class="row">\n                    <div class="col-md-6 col-md-offset-3">\n                        <h4>Dependencies</h4>\n                        <p>CVL uses jQuery for DOM manipulation and Ajax calls. jQuery functionality can easily be removed, if for whatever fancy you prefer native methods</p>\n                        <p>CVL ES6 source runs in every modern "evergreen" browser no problem. However, I prefer to transpile with Babel, it is merely 7kb minified to ES5</p>\n                    </div> \n                </div> \n            </div>',sel:".dependencies"}),foot=new Layer.View({html:'<div class="container">\n            <div class="row">\n                <hr>\n                <p> Component View Layer, MIT License * Copyright (c) 2017 <a href="https://github.com/Omar-Gonzalez">Omar Gonzalez</a></p><br>\n            </div>\n        </div>',sel:".foot"}),test=new Layer.View({html:"hey",sel:".nooo"});
//# sourceMappingURL=cvl.min.js.map